#!/bin/bash

# colors

RED='\033[0;31m'
NC='\033[0m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
MAGENTA='\033[1;35m'
GREY='\033[1;37m'
YELLOW='\033[33m'

# files

CONF_DIR="$HOME/.config/themes"
ACTUAL_THEME_FILE="$CONF_DIR/actual_theme"
TEMPLATES_DIR="$CONF_DIR/templates"

# logger

function error () {
  >&2 printf "${RED}ERROR${NC}:${GREY} $@${NC}\n"
  exit 1
}

function warn () {
  >&2 printf "${YELLOW}WARN${NC}:${GREY} $@${NC}\n"
}

function info () {
  >&2 printf "${BLUE}INFO${NC}:${GREY} $@${NC}\n"
}

function hook_info () {
  >&2 printf "  ${YELLOW}HOOK ${BLUE}INFO${NC}: $@${NC}\n"
}

function success () {
  >&2 printf "${GREEN}SUCCESS${NC}:${GREY} $@${NC}\n"
}

function hook_success () {
  >&2 printf "  ${YELLOW}HOOK ${GREEN}SUCCESS${NC}: $@${NC}\n"
}

# prog

function bootstrap () {
  declare -a to_bootstrap=($CONF_DIR $TEMPLATES_DIR)
  for item in ${to_bootstrap[@]}; do
    if ! test -d $item; then
      warn "Created missing directory $item"
      mkdir $item
    fi
  done
  if ! test -f $ACTUAL_THEME_FILE; then
    warn "Created missing file $ACTUAL_THEME_FILE"
    echo "dark-decay" > $ACTUAL_THEME_FILE
  fi
}

function get_template_dir () {
  echo $TEMPLATES_DIR | sed "s/\/home\/$USER/\~/g"
}

function get_help_msg () {
cat << EOF
${BLUE}usage${YELLOW}:${NC} ${GREEN}themer${NC} ${YELLOW}[${BLUE}-${NC}h${YELLOW}/${BLUE}--${NC}help${YELLOW}]${NC} ${YELLOW}[${BLUE}--${NC}list${YELLOW}/${BLUE}-${NC}l${YELLOW}]${NC} ${YELLOW}[${BLUE}--${NC}switch${YELLOW}/${BLUE}-${NC}s${MAGENTA} TEMPLATE${NC}${YELLOW}]${NC} ${YELLOW}[${BLUE}--${NC}cat${BLUE}-${NC}template${YELLOW}/${BLUE}-${NC}c ${MAGENTA}TEMPLATE${NC}${YELLOW}]${NC}

${GREY}Change the AlphaTechnolog's dotfiles theme, using preconfigured themes templates
that are located in ${BLUE}$(get_template_dir)${NC}

${GREEN}flags${YELLOW}:${NC}
  ${BLUE}--${NC}help${YELLOW}/${BLUE}-${NC}h${YELLOW}:${GREY} Show this help message${NC}
  ${BLUE}--${NC}list${YELLOW}/${BLUE}-${NC}l${YELLOW}:${GREY} List all available themes templates in $(get_template_dir)${NC}
  ${BLUE}--${NC}get${YELLOW}/${BLUE}-${NC}g${YELLOW}:${GREY} Get the actual applied theme${NC}
  ${BLUE}--${NC}switch${YELLOW}/${BLUE}-${NC}s${YELLOW}:${GREY} Switch the actual theme to a specified theme template (<<TEMPLATE>>)${NC}
  ${BLUE}--${NC}cat-template${YELLOW}/${BLUE}-${NC}c${YELLOW}:${GREY} Show the content of a specified theme template (<<TEMPLATE>>)${NC}
EOF
}

function show_help () {
  >&2 printf "$(get_help_msg)\n"
}

function bannermsg () {
cat << EOF
▗▄▄▄▖▗▖
▝▀█▀▘▐▌
  █  ▐▙██▖ ▟█▙ ▐█▙█▖ ▟█▙  █▟█▌
  █  ▐▛ ▐▌▐▙▄▟▌▐▌█▐▌▐▙▄▟▌ █▘
  █  ▐▌ ▐▌▐▛▀▀▘▐▌█▐▌▐▛▀▀▘ █
  █  ▐▌ ▐▌▝█▄▄▌▐▌█▐▌▝█▄▄▌ █
  ▀  ▝▘ ▝▘ ▝▀▀ ▝▘▀▝▘ ▝▀▀  ▀
EOF
}

function banner () {
  printf "${GREEN}$(bannermsg)${NC}\n\n"
}

function render_template () {
  local template="$1"
  printf "  ${YELLOW}-> ${GREY}$template${NC}.\n"
}

function list_templates () {
  local templates=$(ls $TEMPLATES_DIR)
  if [[ $templates == "" ]]; then
    warn "No themes templates found"
  else
    printf "${BLUE}Available themes${YELLOW}:${NC}\n"
  fi
  for template in $templates; do
    render_template "$template"
  done
}

function scat () {
  if command -v bat 2>&1 > /dev/null; then
    bat ${@}
  # batcat for debian i think
  elif command -v batcat 2>&1 > /dev/null; then
    batcat ${@}
  else
    cat ${@} | less
  fi
}

function cat_template () {
  local template=$1
  if ! test -f $TEMPLATES_DIR/$template; then
    error "Fatal error: Cannot open $TEMPLATES_DIR/$template: No such file or directory"
  fi
  scat $TEMPLATES_DIR/$template
  clear
}

function get_actual_theme () {
  printf "${BLUE}Showing actual theme ${YELLOW}(${GREY}in themer database${YELLOW}):${NC}\n"
  local theme=$(cat $ACTUAL_THEME_FILE)
  printf "  ${YELLOW}->${GREY} $theme${NC}.\n"
}

function actual_theme_hook () {
  local theme=$1
  hook_info "Refreshing themer database, and setting $theme as default theme"
  echo $theme > $ACTUAL_THEME_FILE
  hook_success "Refreshed themer database successfully"
}

function get_xresources () {
cat << EOF
Xft.antialias:	1
Xft.hinting:	1
Xft.autohint:	0
Xft.hintstyle:	hintslight
Xft.rgba:	rgb
Xft.lcdfilter:	lcddefault

! window padding
st.borderpx: 20

!-- values between 0.1  - 1.0 --! 

st.alpha: 1.0
st.font: CaskaydiaCove Nerd Font Mono:style:medium:pixelsize=12

!-- colors --!

*.foreground:   $_FG
*.background:   $_BG
*.cursorColor:  $_FG
*fading: 35

*.color0: $_BLACK
*.color1: $_RED
*.color2: $_GREEN
*.color3: $_YELLOW
*.color4: $_BLUE
*.color5: $_MAGENTA
*.color6: $_CYAN
*.color7: $_WHITE

*.color8: $_LIGHT_BLACK
*.color9: $_LIGHT_RED
*.color10: $_LIGHT_GREEN
*.color11: $_LIGHT_YELLOW
*.color12: $_LIGHT_BLUE
*.color13: $_LIGHT_MAGENTA
*.color14: $_LIGHT_CYAN
*.color15: $_LIGHT_WHITE
EOF
}

function xresources_hook () {
  hook_info "Generating new \`.Xresources\`..."
  local theme=$1
  local content="$(get_xresources)"
  local xresources_path="$HOME/.Xresources"
  if test -f $xresources_path; then
    rm $xresources_path
  fi
  echo "$content" > $xresources_path
  hook_success "Done, created xresources successfully"
  hook_info "Refreshing xrdb using new Xresources"
  xrdb merge $xresources_path
  hook_success "Done, database refreshed successfully using \`xrdb\`"
  hook_info "Refreshing st instances to fit with the new xresources config"
  kill -USR1 $(pidof st)
  hook_success "Done, st was refreshed successfully"
}

function hex_without_hash () {
  local hex="$1"
  echo $hex | sed "s/#//g"
}

function process_content () {
  local content="$1"
  echo "$content" | \
    sed "s/outer=.*/outer='0x$(hex_without_hash $_BG)' # outer/g" | \
    sed "s/inner1=.*/inner1='0x$(hex_without_hash $_BLACK)' # focused/g" | \
    sed "s/inner2=.*/inner2='0x$(hex_without_hash $_LIGHTER_BG)' # normal/g"
}

function bspwm_borders_hook () {
  hook_info "Changing style for bspwm borders script"
  local content="$(cat $HOME/.config/bspwm/scripts/borders)"
  local content="$(process_content "$content")"
  echo "$content" > $HOME/.config/bspwm/scripts/borders
  hook_success "Done, script remaked successfully"
  hook_info "Restarting borders"
  pkill borders
  $HOME/.config/bspwm/scripts/borders &
  hook_success "Done, borders now have the correct colours"
}

function get_eww_colors_conf () {
cat << EOF
\$bg: $_BG;
\$contrastbg: $_CONTRAST_BG;
\$bgSecondary: $_LIGHTER_BG;
\$bgSecondaryAlt: $_FG;
\$fg: $_FG;
\$fgDim: $_FG;
\$watermelon: $_RED;

// Aliases
\$background: \$bg;
\$backgroundSecondary: \$bgSecondary;
\$backgroundSecondaryAlt: \$bgSecondaryAlt;
\$foreground: \$fg;
\$foregroundDim: \$fgDim;

\$black: $_BLACK;
\$red: $_RED;
\$blue: $_BLUE;
\$cyan: $_CYAN;
\$blue-desaturated: $_CYAN;
\$magenta: $_MAGENTA;
\$purple: $_MAGENTA;
\$green: $_GREEN;
\$aquamarine: $_GREEN;
\$yellow: $_YELLOW;
\$accent: \$blue;
\$javacafeMagenta: $_MAGENTA;
\$javacafeBlue: $_BLUE;
EOF
}

function eww_colors_hook () {
  hook_info "Generating new eww colors file"
  local config="$(get_eww_colors_conf)"
  echo "$config" > $HOME/.config/eww/_colors.scss
  hook_success "Done, eww colors updated successfully"
}

function get_rofi_config () {
cat << EOF
* {
  background:                 $_BG;
  background-alt:             $_CONTRAST_BG;
  border:                     $_LIGHTER_BG;
  foreground:                 $_FG;
  accent:                     $_GREEN;

  text-color:                 @fg;
  javacafe-blue:              $_BLUE;
}
EOF
}

function rofi_hook () {
  hook_info "Generating new rofi config"
  local config="$(get_rofi_config)"
  echo "$config" > $HOME/.config/rofi/colors/colors.rasi
  hook_success "Done, updated rofi config successfully"
}

function get_dunst_config () {
cat << EOF
[global]
    monitor = 0
    follow = mouse
    width = (111, 444)
    height = 222
    origin = top-right
    offset = 15x70
    scale = 0
    notification_limit = 0
    progress_bar = true
    progress_bar_height = 10
    progress_bar_frame_width = 1
    progress_bar_min_width = 150
    progress_bar_max_width = 300
    indicate_hidden = yes
    transparency = 0
    separator_height = 5
    padding = 15
    horizontal_padding = 15
    text_icon_padding = 0
    frame_width = 0
    frame_color = "$_BG"
    separator_color = frame
    sort = yes
    font = Iosevka Nerd Font 10
    line_height = 0
    markup = full
    format = "<b>%s</b>\n%b"
    alignment = center
    vertical_alignment = center
    show_age_threshold = 60
    ellipsize = middle
    ignore_newline = yes
    stack_duplicates = true
    hide_duplicate_count = false
    show_indicators = no
    icon_position = left
    icon_size = 48
    max_icon_size = 80
[urgency_low]
    background = "$_BG"
    foreground = "$_FG"
    highlight  = "$_FG"
    timeout = 6
[urgency_normal]
    background = "$_BG"
    foreground = "$_FG"
    highlight  = "$_FG"
    highlight-background = "$_CONTRAST_BG"
    timeout = 6
[urgency_critical]
    background = "$_BG"
    foreground = "$_FG"
    highlight  = "$_FG"
    timeout = 10
EOF
}

function dunst_hook () {
  hook_info "Generating new dunst config"
  local config="$(get_dunst_config)"
  echo "$config" > $HOME/.config/dunst/dunstrc
  hook_info "Restarting dunst"
  pkill dunst
  hook_success "Done, rewrited dunst config"
}

function wallpaper_hook () {
  hook_info "Updating wallpaper"
  local wallpaper_path=$HOME/.config/bspwm/wallpapers/wallpaper.jpg
  test -f $wallpaper_path && rm $wallpaper_path
  cp -r $_WALLPAPER $wallpaper_path
  feh --bg-scale $wallpaper_path
  hook_success "Updated wallpaper successfully"
}

function switch () {
  local theme=$1
  if ! test -f $TEMPLATES_DIR/$theme; then
    error "Fatal error. Theme template $theme doesn't exists in $(get_template_dir)"
  fi
  . $TEMPLATES_DIR/$theme
  declare -a hooks=('actual_theme' 'bspwm_borders' 'eww_colors' 'rofi' 'dunst' 'wallpaper' 'xresources')
  for hook in ${hooks[@]}; do
    info "Executing $hook hook..."
    ${hook}_hook $theme
    info "Completed execution of $hook"
  done
}

function arguments () {
  if [[ $1 == "--help" || $1 == "-h" || $1 == "" ]]; then
    show_help
    exit 1
  fi
  if [[ $1 == "--list" || $1 == "-l" ]]; then
    list_templates
  fi
  if [[ $1 == "--get" || $1 == "-g" ]]; then
    get_actual_theme
  fi
  if [[ $1 == "--switch" || $1 == "-s" ]]; then
    if [[ $2 == "" ]]; then
      warn "Missing theme"
      show_help
      exit 1
    fi
    switch ${2}
  fi
  if [[ $1 == "--cat-template" || $1 == "-c" ]]; then
    if [[ $2 == "" ]]; then
      warn "Missing template"
      show_help
      exit 1
    fi
    cat_template ${2}
  fi
}

function main () {
  clear
  banner
  bootstrap
  arguments ${@}
}

main ${@}
