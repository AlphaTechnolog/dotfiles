#!/bin/bash

# initial coroutines

barfile=$HOME/.cache/bspwm/bar

if ! test -d $(dirname $barfile); then
  mkdir -p $(dirname $barfile)
fi

if ! test -f $barfile; then
  echo 'true' > $barfile
fi

# script logic

help () {
  >&2 echo "usage: $0 <restore|switch|toggle> <valueforaction (optional)>"
}

silent_cmd () {
  echo "Execute output of '${@}'" >> $HOME/.cache/bspwm/mode.log
  echo "-------------" >> $HOME/.cache/bspwm/mode.log
  ${@} 2>&1 >> $HOME/.cache/bspwm/mode.log
  local stat=$?
  if [[ $stat != 0 ]]; then
    >&2 echo "Can't execute \`${@}\`, exiting... (logfile $HOME/.cache/bspwm/mode.log)"
    exit 1
  fi
  return $stat
}

restore () {
  local barstatus=$(cat $barfile)
  echo "Restoring bar state..."
  if ! eww ping 2>&1 > /dev/null; then
    silent_cmd eww daemon
  fi
  if [[ $barstatus == "true" ]]; then
    echo "Opening bar"
    bspc config top_padding 44
    bspc config single_monocle false
    bspc config gapless_monocle false
    bspc config borderless_monocle false
    silent_cmd eww open bar
  elif [[ $barstatus == "false" ]]; then
    echo "Closing bar"
    silent_cmd eww close-all
    bspc config top_padding 0
    bspc config single_monocle true
    bspc config gapless_monocle true
    bspc config borderless_monocle true
  else
    echo "Defaulting value to true because $barfile is broken"
    echo "true" > $barfile
    restore
  fi
}

toggle () {
  local barstatus=$(cat $barfile)
  if [[ $barstatus == "true" ]]; then
    echo "false" > $barfile
  elif [[ $barstatus == "false" ]]; then
    echo "true" > $barfile
  else
    echo "Defaulting value to true because $barfile is broken..."
    echo "true" > $barfile
  fi
  restore
}

switch () {
  local mode=$1
  echo "$mode" > $barfile
  restore
}

main () {
  local action="$1"
  if [[ $action == "restore" ]]; then
    restore
  elif [[ $action == "switch" ]]; then
    if [[ $2 == "" ]]; then
      help
      exit 1
    fi
    switch $2
  elif [[ $action == "toggle" ]]; then
    toggle
  else
    help
    exit 0
  fi
  echo "Done"
  exit 0
}

main ${@}
